import functools
import typing

from aiogram import types

# есть три ~~стула~~ термина:
# - идентификация
# - аутентификация
# - авторизация
#
# Для понимания разницы, расскажу сказку))
# Приходит Даня к Серверу и говорит
# - Привет, Сервер!) Я - Даня
# После этих слов Сервер знает, что Я откликаюсь на 'Даня'.
# Это _идентификация_)
#
# Тут сервис задумался, а правда ли тот, кто назвался 'Даня'
# на самом деле является Даней. И тут Сервер говорит
# - Слушай, Даня, а докажи, что ты - Даня. Скажи пароль)
# - Пароль 'fopf123' -- ответил Даня
# Прим. рассказчика: тут в реальности будет хэш пароля, но пофиг.
# - Ну вроде правда Даня. Окей, зачем пришёл?
# Теперь Сервер уверен, что Даня - это Даня. Это _аутентификация_
#
# - А покажи ка мне, Сервер, сообщения других пользователей!
# - Ща, сек - я проверю, хватает ли у тебя, Даня, прав на это дело...
# - блин...
# - А вот фиг тебе! Прав не хватает! This incident will be reported
# А это - _авторизация_
#
# Вот и сказочке конец, а кто слушал - пройдёт собес на джуна)
#
#
# Короче термины лучше понимать, чтоб знать, что делают эти декораторы

F = typing.TypeVar('F', bound=typing.Callable[..., typing.Any])


def user_identified(func: F) -> F:
    """
    Проверяем, что можем идентифицировать пользователя
    В случае ошибки пишем сообщение (и в будующем логируем ошибку)

    Применяем этот декоратор для команд, в которых необходимо знать, с
    каким именно пользователем мы взаимодействуем в данный момент
    """
    @functools.wraps(func)
    async def wrapper(smth: types.Message | types.CallbackQuery, *args, **kwargs) -> typing.Any:
        if smth.from_user is None:
            # а почему не тернарник?
            # https://github.com/python/mypy/issues/4134
            if isinstance(smth, types.Message):
                msg = smth
            else:
                msg = smth.message

            await msg.reply(
                'Бот не видит твой id-шник. '
                'Плиз, обратись в поддержку.\n\n'
                'Пы.Сы.: можешь попробовать добавить бота в контакты или что-то подобное\n'
                'Пы.Пы.Сы.: потому что это первое, что мы посоветуем)))'
            )
            # TODO: прикрутить логер
            # (правда нахрена, если мы не знаем, кто пытался писать :sweat_smile:)
            return

        await func(smth, *args, **kwargs)
    return typing.cast(F, wrapper)
